
@namespace("br.unb.cic.bionimbus.avro.gen")
protocol BioProto {

  enum NodeState { STARTING, ACTIVE, CLOSING, IDLE, ERROR, DECOMMISSIONED }

  record JobCancel {
     string jobID;
     array<string> files;
  }

/*
  record NodeInfo {
    string peerId;
    string address;
    union {NodeState, null} nodeState; // optional
  }
    
  record Pair{
    string first;
    long second;
    }  
  
  record JobInfo {
    string id;
    string localId;
    long serviceId;
    string args ;
    array<Pair> inputs;
    array<string> outputs;
    long timestamp;
  }
 
  record PluginFile {
    string id;
    string path;
    string name;
   long size;
    array<string> pluginId;
  }

  record CancelReqMessage {
    string taskId;
  }

  record CancelRespMessage {
    NodeInfo node;
    //??? pluginTask;
  }


  record CloudReqMessage {
    NodeInfo node;
  }


  record CloudRespMessage {
    NodeInfo node;
    //Collection<PluginInfo> values;
  }

  record EndMessage {
    NodeInfo node;
    //Collection<PluginInfo> values;
  }

  record GetReqMessage {
    NodeInfo node;
    string fileId;
    string taskId;
  }

  record GetRespMessage {
    NodeInfo node;
    string taskId;
    // PluginInfo
    // PluginFile
  }

  // An error that may be thrown by a method
  error Error {
    int code;
    union {string, null} description;
  }

  error InfoErrorMessage {
     string pluginId;
  }

  record InfoReqMessage {
     NodeInfo nodeInfo;
  }

  record InfoRespMessage {
    NodeInfo nodeInfo;
    //PluginInfo
  }

  record JobCancelReqMessage {
    NodeInfo nodeInfo;
    string jobId;
  }

  record JobCancelRespMessage {
    NodeInfo nodeInfo;
    string jobId;
    // status
  }

  record JobReqMessage {
    NodeInfo nodeInfo;
    //Collection <jobInfo> values
  }

  record JobRespMessage {
    NodeInfo nodeInfo;
    //jobInfo
  }

  record ListReqMessage {
    NodeInfo nodeInfo;
  }

  record ListRespMessage {
    NodeInfo nodeInfo;
    //collection<pluginFile>
  }

  record PingReqMessage {
    NodeInfo nodeInfo;
    long timestamp = 0;
  }

  record PingRespMessage {
    NodeInfo nodeInfo;
    long timestamp = 0;
  }

  record PrepReqMessage {
    NodeInfo nodeInfo;
    string taskId;
  }

  record PrepRespMessage {
    NodeInfo nodeInfo;
    //pluginInfo
    //pluginfile
    //taskId
  }

  error SchedError {
     string jobId;
     string message;
  }

  record SchedReqMessage {
    NodeInfo nodeInfo;
    //collection<jobInfo>
  }

  record SchedRespMessage{
    NodeInfo nodeInfo;
    string jobId;
    //plugininfo
  }

  record StartReqMessage {
    NodeInfo nodeInfo;
    //jobinfo
  }

  record StartRespMessage {
    NodeInfo nodeInfo;
    string jobId;
    //plugintask
  }

  record ReqMessage {
    NodeInfo nodeInfo;
    string taskId;
  }

  record RespMessage {
    NodeInfo nodeInfo;
    string jobId;
    //plugintask
  }

  record StatusReqMessage {
    NodeInfo nodeInfo;
    string taskId;
  }

  record StatusRepMessage {
    NodeInfo nodeInfo;
    //pluginTask
  }

  record StoreReqMessage {
    NodeInfo nodeInfo;
    //FileInfo
  }

  record StoreRespMessage {
    NodeInfo nodeInfo;
    string taskId;
    //pluginFile
    //FileInfo
    //pluginInfo
  }
  error TaskError {
    string pluginId;
    string taskId;
    string message;
  }
  */

    record Pair{
    string first;
    long second;
    }  
  
  record JobInfo {
    string id;
    string localId;
    long serviceId;
    string args ;
    array<Pair> inputs;
    array<string> outputs;
    long timestamp;
  }

  record PluginFile {
    string id;
    string path;
    string name;
   long size;
    array<string> pluginId;
  }


  /** Sends a bid request to a bidder and receives the response */
  //BidResponse bid(BidRequest bidRequest) throws BidderError;

  /** Sends a notification */
  //void notify(EndMessage notification) oneway;

  //void cancelTask(string taskId) oneway;

  /* PingRespMessage ping(PingReqMessage request); */

  //CancelRespMessage cancelTask(string taskId);

  //CloudRespMessage cloudRequest();

  /** Pings a node, e.g. to measure latency */
  boolean ping();

  array<string> listFilesName();

  /** Procurar em qual Ip está o arquivo file */    
  string listFilesIp(string file);

  array<string> listServices();

  array<PluginFile> listFiles();

  string startJobName(string jobID);

  string startJob(array<JobInfo> listJob);

  string schedPolicy(int numPolicy);
  string statusJob(string jobId);
  string statusAllJob();


  string cancelJob(string jobID);

    record NodeInfo {
    string peerId;
    string address;
    float freesize;
    double latency; 
  }

  record FileInfo{
    string fileId;
    long size;
    string name;    
  }

   //Set information file that will be uploaded
   void setFileInfo(FileInfo file, string kindService) oneway;

  //Get peers from server
  array<NodeInfo> getPeersNode();

  //Enviar plugins
  // void sendPlugins(array<NodeInfo> plugins) oneway;

  //Mensagem de arquivo enviado com sucesso do cliente pro servidor
  void fileSent(FileInfo fileSucess,array<string> dest) oneway;

  //Chamar Storage Service
   array<NodeInfo> callStorage(array<NodeInfo> list);

  //Invocar metodo de replicação
  void notifyReply(string filename,string address) oneway;

  //verifica se exist o arquivo e cria no znode setando o watcher
   boolean verifyFile(FileInfo fileSucess,array<string> dest);
   
  //seta os watchers na status para a storage , pode ser setado pros outros servicos tambem
   void setWatcher(string idPlugin) oneway; 

  //verifica o tamanho do arquivo
  long checkFileSize (string file);
}
