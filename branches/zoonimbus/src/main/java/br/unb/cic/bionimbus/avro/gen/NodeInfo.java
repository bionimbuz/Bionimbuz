/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package br.unb.cic.bionimbus.avro.gen;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class NodeInfo extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"NodeInfo\",\"namespace\":\"br.unb.cic.bionimbus.avro.gen\",\"fields\":[{\"name\":\"peerId\",\"type\":\"string\"},{\"name\":\"address\",\"type\":\"string\"},{\"name\":\"nodeState\",\"type\":[{\"type\":\"enum\",\"name\":\"NodeState\",\"symbols\":[\"STARTING\",\"ACTIVE\",\"CLOSING\",\"IDLE\",\"ERROR\",\"DECOMMISSIONED\"]},\"null\"]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.CharSequence peerId;
  @Deprecated public java.lang.CharSequence address;
  @Deprecated public br.unb.cic.bionimbus.avro.gen.NodeState nodeState;

  /**
   * Default constructor.
   */
  public NodeInfo() {}

  /**
   * All-args constructor.
   */
  public NodeInfo(java.lang.CharSequence peerId, java.lang.CharSequence address, br.unb.cic.bionimbus.avro.gen.NodeState nodeState) {
    this.peerId = peerId;
    this.address = address;
    this.nodeState = nodeState;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return peerId;
    case 1: return address;
    case 2: return nodeState;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: peerId = (java.lang.CharSequence)value$; break;
    case 1: address = (java.lang.CharSequence)value$; break;
    case 2: nodeState = (br.unb.cic.bionimbus.avro.gen.NodeState)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'peerId' field.
   */
  public java.lang.CharSequence getPeerId() {
    return peerId;
  }

  /**
   * Sets the value of the 'peerId' field.
   * @param value the value to set.
   */
  public void setPeerId(java.lang.CharSequence value) {
    this.peerId = value;
  }

  /**
   * Gets the value of the 'address' field.
   */
  public java.lang.CharSequence getAddress() {
    return address;
  }

  /**
   * Sets the value of the 'address' field.
   * @param value the value to set.
   */
  public void setAddress(java.lang.CharSequence value) {
    this.address = value;
  }

  /**
   * Gets the value of the 'nodeState' field.
   */
  public br.unb.cic.bionimbus.avro.gen.NodeState getNodeState() {
    return nodeState;
  }

  /**
   * Sets the value of the 'nodeState' field.
   * @param value the value to set.
   */
  public void setNodeState(br.unb.cic.bionimbus.avro.gen.NodeState value) {
    this.nodeState = value;
  }

  /** Creates a new NodeInfo RecordBuilder */
  public static br.unb.cic.bionimbus.avro.gen.NodeInfo.Builder newBuilder() {
    return new br.unb.cic.bionimbus.avro.gen.NodeInfo.Builder();
  }
  
  /** Creates a new NodeInfo RecordBuilder by copying an existing Builder */
  public static br.unb.cic.bionimbus.avro.gen.NodeInfo.Builder newBuilder(br.unb.cic.bionimbus.avro.gen.NodeInfo.Builder other) {
    return new br.unb.cic.bionimbus.avro.gen.NodeInfo.Builder(other);
  }
  
  /** Creates a new NodeInfo RecordBuilder by copying an existing NodeInfo instance */
  public static br.unb.cic.bionimbus.avro.gen.NodeInfo.Builder newBuilder(br.unb.cic.bionimbus.avro.gen.NodeInfo other) {
    return new br.unb.cic.bionimbus.avro.gen.NodeInfo.Builder(other);
  }
  
  /**
   * RecordBuilder for NodeInfo instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<NodeInfo>
    implements org.apache.avro.data.RecordBuilder<NodeInfo> {

    private java.lang.CharSequence peerId;
    private java.lang.CharSequence address;
    private br.unb.cic.bionimbus.avro.gen.NodeState nodeState;

    /** Creates a new Builder */
    private Builder() {
      super(br.unb.cic.bionimbus.avro.gen.NodeInfo.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(br.unb.cic.bionimbus.avro.gen.NodeInfo.Builder other) {
      super(other);
    }
    
    /** Creates a Builder by copying an existing NodeInfo instance */
    private Builder(br.unb.cic.bionimbus.avro.gen.NodeInfo other) {
            super(br.unb.cic.bionimbus.avro.gen.NodeInfo.SCHEMA$);
      if (isValidValue(fields()[0], other.peerId)) {
        this.peerId = data().deepCopy(fields()[0].schema(), other.peerId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.address)) {
        this.address = data().deepCopy(fields()[1].schema(), other.address);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.nodeState)) {
        this.nodeState = data().deepCopy(fields()[2].schema(), other.nodeState);
        fieldSetFlags()[2] = true;
      }
    }

    /** Gets the value of the 'peerId' field */
    public java.lang.CharSequence getPeerId() {
      return peerId;
    }
    
    /** Sets the value of the 'peerId' field */
    public br.unb.cic.bionimbus.avro.gen.NodeInfo.Builder setPeerId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.peerId = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'peerId' field has been set */
    public boolean hasPeerId() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'peerId' field */
    public br.unb.cic.bionimbus.avro.gen.NodeInfo.Builder clearPeerId() {
      peerId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'address' field */
    public java.lang.CharSequence getAddress() {
      return address;
    }
    
    /** Sets the value of the 'address' field */
    public br.unb.cic.bionimbus.avro.gen.NodeInfo.Builder setAddress(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.address = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'address' field has been set */
    public boolean hasAddress() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'address' field */
    public br.unb.cic.bionimbus.avro.gen.NodeInfo.Builder clearAddress() {
      address = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'nodeState' field */
    public br.unb.cic.bionimbus.avro.gen.NodeState getNodeState() {
      return nodeState;
    }
    
    /** Sets the value of the 'nodeState' field */
    public br.unb.cic.bionimbus.avro.gen.NodeInfo.Builder setNodeState(br.unb.cic.bionimbus.avro.gen.NodeState value) {
      validate(fields()[2], value);
      this.nodeState = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'nodeState' field has been set */
    public boolean hasNodeState() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'nodeState' field */
    public br.unb.cic.bionimbus.avro.gen.NodeInfo.Builder clearNodeState() {
      nodeState = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    public NodeInfo build() {
      try {
        NodeInfo record = new NodeInfo();
        record.peerId = fieldSetFlags()[0] ? this.peerId : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.address = fieldSetFlags()[1] ? this.address : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.nodeState = fieldSetFlags()[2] ? this.nodeState : (br.unb.cic.bionimbus.avro.gen.NodeState) defaultValue(fields()[2]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
