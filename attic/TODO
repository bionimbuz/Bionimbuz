 1) Ajustar MonitorService para mandar requisicoes de Status para o plugin,
    ao inves de broadcast
 
 2) Fazer camada de abstracao de plugins, repassando somente eventos que interesse aos plugins

 3) Fazer tratamento de erros de rede
 
 4) Fazer plugin persistir arquivos salvos no seu storage e envia-los ao StorageService sempre que iniciado.
 
 5) Terminar parte de finalização de Jobs
 
 6) Fazer lógica de eleição de master no P2P e atualização de master.
 
 7) Incorporar UDP no servico de mensagens.
 
 8) Fazer camada de abstracao de servicos, removendo codigo repetido no recebimento de eventos.
 
 9) Fazer o p2p retornar os peers onde estao os servicos, gerando menos broadcasts.
 
 10) Revisar nome e conteudo das mensagens.
 
 11) Rever todos os broadcasts.
 
 12) Pensar em utilizar peer ids para pegar os host e enviar direto.

 13) Fazer a limpeza dos arquivos de entrada depois de utilizados.

 14) Fazer evento de termino de envio de arquivo

 15) Evitar transferencias de arquivo entre o mesmo plugin.
 
 --> Operação de Download de um arquivo da federação:
 
  Texto adicionado em 16/01/2013, por Jefferson Leandro, de Hugo Saldanha
  
  A parte de download não está implementada no shell, uma vez que não foi 
  necessária nos meus testes. Eu só precisava saber que o output estava 
  sendo gravado no armazenamento da federação. Mas não é complicado. 
  O esquema deve ser exatamente igual ao que o plugin faz quando quer 
  um arquivo. Vou resumir abaixo:

  1) Na classe AbstractPlugin, veja o método recvStartReq(). 
  Ele recebe uma task para ser executada no plugin. Ele verifica se existe 
  arquivo de entrada. Para cada arquivo, ele manda uma mensagem da 
  classe GetReqMessage para a federação.

  2) Essa mensagem é tratada no StorageService, no método onEvent(). 
  Ele procura na sua tabela onde o arquivo está armazenado e avisa a 
  quem pediu a informação com uma mensagem da classe GetRespMessage().

  3) O plugin recebe essa mensagem. Na classe AbstractPlugin, no método 
  recvGetResp(), ele solicita a quem tem o arquivo para que o prepare para 
  envio, com a mensagem PrepReqMessage.

  4) O plugin que possui o arquivo armazenado busca o mesmo da sua infraestrutura, 
  deixa pronto para download, e avisa ao solicitante com uma mensagem PrepRespMessage. 
  Tudo isso é feito no método recvPrepReq() do AbstractPlugin, que inicia a thread que 
  busca o arquivo da infraestrutura, e no método checkPendingGets(), também do AbstractPlugin, 
  que percebe o fim da execução da thread e manda a mensagem.

  5) Com o aviso de que o arquivo está pronto para download, finalmente o plugin que quer o 
  arquivo faz o download do arquivo. Isso é feito no método recvPrepResp(), no AbstractPlugin. 
  Ele faz o download por meio do método getFile() da classe P2PService.

  Com esse resumo, dá pra entender bem como é feito um download. O que vc tem que fazer no shell é:

  1) Enviar uma mensagem GetReqMessage com o id do arquivo desejado.
  2) Aguardar a resposta GetRespMessage com o plugin que possui o arquivo.
  3) Enviar uma mensagem PrepReqMessage para o plugin que possui o arquivo e aguardar a resposta PrepRespMessage.
  4) Fazer o download do arquivo com o método P2PService.getFile() indicando o endereço do plugin e o 
     path do arquivo que vem da PrepRespMessage.
     
     
     